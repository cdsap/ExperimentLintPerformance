name: "Java Memory Monitor"
description: "Tracks memory usage of Gradle/Kotlin daemons during the job"

inputs:
    interval:
        description: "Polling interval in seconds"
        required: false
        default: "5"

runs:
    using: "composite"
    steps:
        - name: Start Java memory monitor
          id: monitor_start
          shell: bash
          run: |
              chmod +x ${{ github.action_path }}/monitor.sh
              # Start the monitor in the background with proper detachment
              setsid nohup ${{ github.action_path }}/monitor.sh "${{ inputs.interval }}" > java_mem_monitor.log 2>&1 &
              MONITOR_PID=$!
              echo $MONITOR_PID > monitor.pid
              echo "monitor_pid=$MONITOR_PID" >> $GITHUB_OUTPUT
              
              # Wait a bit to ensure the monitor is running
              sleep 2
              
              # Verify the monitor is running and log its status
              if kill -0 $MONITOR_PID 2>/dev/null; then
                echo "Monitor started successfully with PID $MONITOR_PID"
                ps -p $MONITOR_PID -o command
              else
                echo "Monitor failed to start properly"
                cat java_mem_monitor.log
                exit 1
              fi

    post: |
        #!/bin/bash
        echo "Stopping Java memory monitor..."
        if [[ -f monitor.pid ]]; then
          MONITOR_PID=$(cat monitor.pid)
          echo "Found monitor PID: $MONITOR_PID"
          if kill -0 $MONITOR_PID 2>/dev/null; then
            echo "Monitor is still running, stopping it..."
            kill $MONITOR_PID || true
            sleep 1
            if kill -0 $MONITOR_PID 2>/dev/null; then
              echo "Monitor still running, forcing kill..."
              kill -9 $MONITOR_PID || true
            fi
          fi
          rm monitor.pid
        fi

        # Ensure we have write access to the summary file
        if [[ -n "$GITHUB_STEP_SUMMARY" ]]; then
          echo "### Java Memory Monitor Summary" > "$GITHUB_STEP_SUMMARY"
          if [[ -f java_mem_monitor.log ]]; then
            echo "Last 20 lines of memory monitoring:" >> "$GITHUB_STEP_SUMMARY"
            # Add a header to make the output more readable
            echo "```" >> "$GITHUB_STEP_SUMMARY"
            tail -n 20 java_mem_monitor.log >> "$GITHUB_STEP_SUMMARY"
            echo "```" >> "$GITHUB_STEP_SUMMARY"
            
            # Add a summary of all unique processes found
            echo -e "\n### Processes Monitored" >> "$GITHUB_STEP_SUMMARY"
            echo "```" >> "$GITHUB_STEP_SUMMARY"
            grep "|" java_mem_monitor.log | awk -F'|' '{print $3}' | sort | uniq -c | sort -nr >> "$GITHUB_STEP_SUMMARY"
            echo "```" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No monitoring log found" >> "$GITHUB_STEP_SUMMARY"
          fi
        else
          echo "Warning: GITHUB_STEP_SUMMARY is not set"
        fi

        mkdir -p logs
        mv java_mem_monitor.log logs/ || true
